#ifndef __container__
#define __container__

//------------------------------------------------------------------------------
// container.h - содержит тип данных,
// представляющий простейший контейнер
//------------------------------------------------------------------------------

#include "transport.h"

//------------------------------------------------------------------------------
// Простейший контейнер на основе одномерного массива
class Container {
private:
    // максимальная длина
    enum {max_len = 10000};

    // текущая длина
    int len;

    // список транспорта в контейнере
    Transport *cont[max_len];

    // Очистка контейнера от элементов (освобождение памяти)
    void Clear();

public:
    // Конструктор контейнера
    Container();

    // Деструктор контейнера
    ~Container();

    // Ввод содержимого контейнера из указанного потока
    void In(std::ifstream &ifst);

    // Случайный ввод содержимого контейнера
    void InRnd(size_t size);

    // Вывод содержимого контейнера в указанный поток
    void Out(std::ofstream &ofst);

    // Метод для правильной сортировки
    void heapify(int n, int i);

    // Сортировка контейнера по убыванию с помощью "дерева"
    void HeapSort();
};


#endif
